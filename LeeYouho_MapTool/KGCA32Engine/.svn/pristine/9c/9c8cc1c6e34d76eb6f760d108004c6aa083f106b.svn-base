#include "BObject.h"
#include "BInput.h"

HRESULT BObject::Create(ID3D11Device* pDevice, const TCHAR* pLoadShaderFile, TCHAR** pLoadTextureString, int TextureCnt)
{
	m_pd3dDevice = pDevice;

	HRESULT hr = S_OK;

	S_RETURN(LoadShaderAndInputLayout(pLoadShaderFile));
	S_RETURN(CreateVertexBuffer());
	S_RETURN(CreateIndexBuffer());
	S_RETURN(CreateConstantBuffer());
	if (pLoadTextureString != NULL)
	{
		if (TextureCnt < 2)
		{
			S_RETURN(TextureLoad(pDevice, pLoadTextureString[0]));
		}
		else
		{
			S_RETURN(TextureLoad(pDevice, pLoadTextureString, TextureCnt));
		}
	}
	else
	{
		m_iCurIndex = 0;
	}
	return hr;
}

HRESULT BObject::Create(ID3D11Device* pDevice, const TCHAR* pLoadShaderFile, const TCHAR* pLoadTextureString)
{
	m_pd3dDevice = pDevice;

	HRESULT hr = S_OK;

	S_RETURN(LoadShaderAndInputLayout(pLoadShaderFile));
	S_RETURN(CreateVertexBuffer());
	S_RETURN(CreateIndexBuffer());
	S_RETURN(CreateConstantBuffer());
	if (pLoadTextureString != NULL)
	{
		S_RETURN(TextureLoad(pDevice, pLoadTextureString));
	}
	else
	{
		m_iCurIndex = 0;
	}
	return hr;
}

HRESULT BObject::TextureLoad(ID3D11Device* pDevice, const TCHAR* strFilePath)
{
	m_pTextureSRV.resize(1);
	HRESULT hr = S_OK;
	if (strFilePath == NULL) m_pTextureSRV[0].Attach(nullptr);
	ID3D11ShaderResourceView* pSRV = nullptr;
	if (FAILED(hr = D3DX11CreateShaderResourceViewFromFile(pDevice, strFilePath, NULL, NULL, &pSRV, NULL)))
	{
		
		m_pTextureSRV[0].Attach(nullptr);
	}
	m_pTextureSRV[0].Attach(pSRV);
	m_iCurIndex++;
	return hr;
}
HRESULT BObject::TextureLoad(ID3D11Device* pDevice, TCHAR* strFilePathes[], int strCount)
{
	HRESULT hr = S_OK;
	m_pTextureSRV.resize(strCount);
	for (int iTex = 0; iTex < strCount; iTex++)
	{
		ID3D11ShaderResourceView* pSRV = nullptr;
		if (FAILED(hr = D3DX11CreateShaderResourceViewFromFile(pDevice, strFilePathes[iTex], NULL, NULL, &pSRV, NULL)))
		{
			return hr;
		}
		m_pTextureSRV[iTex].Attach(pSRV);
		m_iCurIndex++;
	}
	return hr;
}

HRESULT BObject::CreateVertexBuffer()
{
	HRESULT hr = S_OK;
	return hr;
}
HRESULT BObject::CreateIndexBuffer()
{
	HRESULT hr = S_OK;
	return hr;
}
HRESULT BObject::CreateConstantBuffer()
{
	HRESULT hr = S_OK;

	D3D11_BUFFER_DESC cbDesc;
	cbDesc.Usage = D3D11_USAGE_DEFAULT;					//CPU에서 GPU로 Access 가능하게 해주는 플래그
	cbDesc.CPUAccessFlags = 0;							//CPU에서 GPU로 Access 가능하게 해주는 플래그
	cbDesc.ByteWidth = sizeof(VSConstantB);
	cbDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
	cbDesc.MiscFlags = 0;

	S_RETURN(m_pd3dDevice->CreateBuffer(&cbDesc, NULL, &m_pConstantBuffer));
	return hr;
}
HRESULT BObject::LoadShaderAndInputLayout(const TCHAR* pShaderFile)
{
	HRESULT hr = S_OK;

	DWORD dwShaderFlags = D3DCOMPILE_ENABLE_STRICTNESS; // 쉐이더 디버그 허용
	ID3DBlob* pVSBUF = NULL;
	ID3DBlob* pPSBUF = NULL;
	ID3DBlob* pGSBUF = NULL;
	
	ID3DBlob* pError = NULL; // 이것을 넣음으로써 오류가 난 이유를 받아 낼 수 있다.
							 /* vs_5_0 == direct11 은 5.0을 사용 * pVSBuf 결과가 담김 */
	
	if (FAILED(D3DX11CompileFromFile(pShaderFile, NULL, NULL, "VS", "vs_5_0", dwShaderFlags, NULL, NULL, &pVSBUF, &pError, NULL)))
	{
		TCHAR buffer[256] = { 0, };
		mbstowcs(buffer, (char*)pError->GetBufferPointer(), 256);
		MessageBox(NULL, buffer, _T("VS"), MB_OK);
	}
	if (pVSBUF != nullptr)
	{
		S_RETURN(m_pd3dDevice->CreateVertexShader((DWORD*)pVSBUF->GetBufferPointer(), pVSBUF->GetBufferSize(), NULL, &m_pVS));
	}

	if (FAILED(D3DX11CompileFromFile(pShaderFile, NULL, NULL, "GS", "gs_5_0", dwShaderFlags, NULL, NULL, &pGSBUF, &pError, NULL)))
	{
		TCHAR buffer[256] = { 0, };
		mbstowcs(buffer, (char*)pError->GetBufferPointer(), 256);
		//MessageBox(NULL, buffer, _T("GS"), MB_OK);
	}
	if (pGSBUF != nullptr)
	{
		S_RETURN(m_pd3dDevice->CreateGeometryShader((DWORD*)pGSBUF->GetBufferPointer(), pGSBUF->GetBufferSize(), NULL, &m_pGS));
	}

	if (FAILED(D3DX11CompileFromFile(pShaderFile, NULL, NULL, "PS", "ps_5_0", dwShaderFlags, NULL, NULL, &pPSBUF, &pError, NULL)))
	{
		TCHAR buffer[256] = { 0, };
		mbstowcs(buffer, (char*)pError->GetBufferPointer(), 256);
		//MessageBox(NULL, buffer, _T("PS"), MB_OK);
	}
	if (pPSBUF != nullptr)
	{
		S_RETURN(m_pd3dDevice->CreatePixelShader((DWORD*)pPSBUF->GetBufferPointer(), pPSBUF->GetBufferSize(), NULL, &m_pPS));
	}

	const D3D11_INPUT_ELEMENT_DESC layout[] =
	{
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,    0, 0,  D3D11_INPUT_PER_VERTEX_DATA, 0 },
		{ "NORMAL",   0, DXGI_FORMAT_R32G32B32_FLOAT,    0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0 },
		{ "COLOR",	  0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 24, D3D11_INPUT_PER_VERTEX_DATA, 0 },
		{ "TEXTURE",  0, DXGI_FORMAT_R32G32_FLOAT,       0, 40, D3D11_INPUT_PER_VERTEX_DATA, 0 },
	};
	UINT iSize = sizeof(layout) / sizeof(layout[0]);

	S_RETURN(m_pd3dDevice->CreateInputLayout(layout, iSize, pVSBUF->GetBufferPointer(), pVSBUF->GetBufferSize(), &m_pVertexLayout)); // m_pVertexLayout 제작

	S_RELEASE(pVSBUF);
	S_RELEASE(pPSBUF);
	S_RELEASE(pGSBUF);
	return hr;
}

void BObject::SetMatrix(D3DXMATRIX World, D3DXMATRIX View, D3DXMATRIX Proj)
{
	m_matWorld = World;
	m_matView = View;
	m_matProj = Proj;

	D3DXMatrixTranspose(&m_matWorld, &m_matWorld);
	D3DXMatrixTranspose(&m_matView, &m_matView);
	D3DXMatrixTranspose(&m_matProj, &m_matProj);

	m_cbData.m_matWorld = m_matWorld;
	m_cbData.m_matView = m_matView;
	m_cbData.m_matProj = m_matProj;
	m_cbData.f_Time = cosf(timeGetTime()*0.001f) * 0.5f + 0.5f;

	D3DXMatrixTranspose(&m_matWorld, &m_matWorld);
}
bool BObject::Init()
{
	m_vPos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_vTarget = D3DXVECTOR3(0.0f, 0.0f, 1.0f);
	m_vUp = D3DXVECTOR3(0.0f, 1.0f, 0.0f);

	D3DXMatrixLookAtLH(&m_matWorld, &m_vPos, &m_vTarget, &m_vUp);
	UpdateVector();

	return true;
}

bool BObject::Frame()
{
	return true;
}

bool BObject::PostFrame()
{
	// 위
	if (g_InputData.bWKey)
		m_vPos += m_vLook * 10.0f * (g_fSecPerFrame + m_SpeedUp);
	// 아래
	if (g_InputData.bSKey)
		m_vPos -= m_vLook * 10.0f * (g_fSecPerFrame + m_SpeedUp);
	// 왼쪽
	if (g_InputData.bAKey)
		m_vPos -= m_vSide * 10.0f * (g_fSecPerFrame + m_SpeedUp);
	// 오른쪽
	if (g_InputData.bDKey)
		m_vPos += m_vSide * 10.0f * (g_fSecPerFrame + m_SpeedUp);
	// 위
	if (g_InputData.bQKey)
		m_vPos += m_vUp * 10.0f * (g_fSecPerFrame);
	// 아래
	if (g_InputData.bEKey)
		m_vPos -= m_vUp * 10.0f * (g_fSecPerFrame);
	/*카메라 이동가속도*/
	if (g_InputData.bSpace)
		m_SpeedUp += 0.00001;
	else
		m_SpeedUp = 0;

	if (I_Input.m_DIMouseState.rgbButtons[1] & 0x80)
	{
		m_fPitch += D3DXToRadian(I_Input.m_DIMouseState.lY) * 0.1;
		m_fYaw += D3DXToRadian(I_Input.m_DIMouseState.lX) * 0.1;
	}
	UpdateQuaternion();

	return true;
}

bool BObject::PreRender(ID3D11DeviceContext* pContext)
{
	pContext->IASetPrimitiveTopology((D3D11_PRIMITIVE_TOPOLOGY)m_iPrimitiveType);		//토폴로지 세팅
	pContext->IASetInputLayout(m_pVertexLayout);										//레이아웃 세팅
																						/*버텍스 버퍼 세팅*/
	UINT stride = sizeof(PNCT_Vertex);		 // 버텍스 하나 전체의 크기
	UINT offset = 0;						 // 버퍼 시작위치
	pContext->IASetVertexBuffers(0, 1, &m_pVertexBuffer, &stride, &offset);  // 버텍스 버퍼 바인딩
	pContext->IASetIndexBuffer(m_pIndexBuffer, DXGI_FORMAT_R32_UINT, 0);	 // 인덱스 버퍼 바인딩
	pContext->VSSetConstantBuffers(0, 1, &m_pConstantBuffer);				 // 버텍스 쉐이더 상수버퍼 세팅
	
	/*쉐이더 적용*/
	pContext->VSSetShader(m_pVS, NULL, 0);
	pContext->HSSetShader(NULL, NULL, 0);
	pContext->DSSetShader(NULL, NULL, 0);
	pContext->GSSetShader(NULL, NULL, 0);
	pContext->PSSetShader(m_pPS, NULL, 0);
	if (m_iCurIndex != 0)
	{
		pContext->PSSetShaderResources(0, m_iCurIndex, m_pTextureSRV[0].GetAddressOf()); // 텍스쳐 세팅
	}
	return true;
}
bool BObject::PostRender(ID3D11DeviceContext* pContext)
{
	pContext->UpdateSubresource(m_pConstantBuffer, 0, NULL, &m_cbData, 0, 0);
	pContext->DrawIndexed(m_IndexList.size(), 0, 0);
	// 초기화
	vector<ComPtr<ID3D11ShaderResourceView>> pSRV;
	pSRV.resize(m_iCurIndex);
	pSRV = { NULL, };
	pContext->PSSetShaderResources(0, m_iCurIndex, pSRV[0].GetAddressOf());
	return true;
}

/*Device에서 DX내의 DSV, DSS, BS를 전부 선언해 두었기 때문에 해당하는 값과 Core나 Sample에서 제작한 m_pRTV를 넘겨주기만 하면 된다.*/
/*해당 함수는 랜더링 전에 이루어져야 한다.*/
bool BObject::OMSetState(ID3D11DeviceContext* pContext, ID3D11RenderTargetView* m_pRTV, ID3D11DepthStencilView* m_pDSV, ID3D11DepthStencilState* m_pDSS, ID3D11BlendState* m_pBS)
{
	pContext->OMSetRenderTargets(1, &m_pRTV, m_pDSV);		// 랜더타겟뷰, 깊이버퍼 설정
	pContext->OMSetDepthStencilState(m_pDSS, 0x00);			// 깊이 스텐실 뷰설정
	pContext->OMSetBlendState(m_pBS, 0, -1);				// 알파블랜드 값 설정
	return true;
}

bool BObject::Render(ID3D11DeviceContext* pContext)
{
	PreRender(pContext);
	PostRender(pContext);
	return true;
}

bool BObject::UpdateVector()
{
	m_vSide.x = m_matWorld._11;
	m_vSide.y = m_matWorld._12;
	m_vSide.z = m_matWorld._13;

	m_vUp.x = m_matWorld._21;
	m_vUp.y = m_matWorld._22;
	m_vUp.z = m_matWorld._23;

	m_vLook.x = m_matWorld._31;
	m_vLook.y = m_matWorld._32;
	m_vLook.z = m_matWorld._33;

	D3DXVec3Normalize(&m_vUp, &m_vUp);
	D3DXVec3Normalize(&m_vSide, &m_vSide);
	D3DXVec3Normalize(&m_vLook, &m_vLook);
	return true;
}

bool BObject::UpdateQuaternion()
{
	UpdateVector();

	m_matWorld._41 = m_vPos.x;
	m_matWorld._42 = m_vPos.y;
	m_matWorld._43 = m_vPos.z;
	return true;
}

bool BObject::UpdateBuffer() { return true; }

bool BObject::Release()
{
	S_RELEASE(m_pVertexLayout);
	S_RELEASE(m_pVertexBuffer);
	S_RELEASE(m_pIndexBuffer);
	S_RELEASE(m_pConstantBuffer);
	S_RELEASE(m_pVS);
	S_RELEASE(m_pPS);
	S_RELEASE(m_pGS);
	return true;
}

BObject::BObject()
{
	m_pVertexLayout = NULL;
	m_pVertexBuffer = NULL;
	m_pIndexBuffer = NULL;
	m_pConstantBuffer = NULL;
	m_pVS = NULL;
	m_pPS = NULL;
	m_iCurIndex = 0;
	m_iPrimitiveType = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
	D3DXMatrixIdentity(&m_matWorld);
	D3DXMatrixIdentity(&m_matRotate);
	D3DXMatrixIdentity(&m_matTrans);
	D3DXMatrixIdentity(&m_matScale);
}


BObject::~BObject()
{
	m_iCurIndex = 0;
}
