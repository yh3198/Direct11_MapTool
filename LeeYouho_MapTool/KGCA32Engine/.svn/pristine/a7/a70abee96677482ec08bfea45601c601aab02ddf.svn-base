Texture2D Texture0[4] : register (t0);		
Texture2D AlphaTexture : register (t1);		
Texture2D AlphaImageTex1 : register (t2);
Texture2D AlphaImageTex2 : register (t3);
Texture2D AlphaImageTex3 : register (t4);
Texture2D AlphaImageTex4 : register (t5);


SamplerState Sample0 : register (s0);	// 텍스쳐를 컨트롤 하기 위한 변수

cbuffer cb0
{
	matrix	g_matWorld		: packoffset(c0);
	matrix	g_matView		: packoffset(c4);
	matrix	g_matProj		: packoffset(c8);
};

struct VS_OUTPUT
{
	float4 Position : SV_POSITION; // 버텍스 포지션
	float3 Normal : NORMAL;		   // 버텍스 노멀
	float4 Diffuse : COLOR0;	   // 버텍스 색상값
	float2 Texture : TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 c : SV_Target;
};

VS_OUTPUT VS(in float3 p : POSITION, in float3 n : NORMAL, in float4 c : COLOR, in float2 t : TEXTURE)
{
	VS_OUTPUT Output;
	float3 vPos = p;
	Output.Position = float4(vPos, 1.0f);
	Output.Position = mul(Output.Position, g_matWorld);
	Output.Position = mul(Output.Position, g_matView);
	Output.Position = mul(Output.Position, g_matProj);
	
	Output.Normal = float3(n);
	Output.Diffuse = float4(c);
	Output.Texture = float2(t);
	return Output;
}
//Texture0[0].Sample(Sample0, input.Texture);
float4 PS(VS_OUTPUT input) : SV_Target
{
	float3 vLightDir = float3(240.0f, 160.0f, -130.0f);
	float fDot = dot(input.Normal, normalize(-vLightDir));

	PS_OUTPUT Alpha;
	Alpha.c = AlphaTexture.Sample(Sample0, input.Texture);
	PS_OUTPUT vOut;
	vOut.c = AlphaImageTex1.Sample(Sample0, input.Texture) * Alpha.c.x;
	vOut.c += AlphaImageTex2.Sample(Sample0, input.Texture) * Alpha.c.y;
	vOut.c += AlphaImageTex3.Sample(Sample0, input.Texture*10) * Alpha.c.z;
	vOut.c += AlphaImageTex4.Sample(Sample0, input.Texture) * Alpha.c.w;

	return vOut.c;// * fDot;
}

float4 AlphaMap_PS(VS_OUTPUT input) : SV_Target
{
	PS_OUTPUT Alpha;
	Alpha.c = AlphaTexture.Sample(Sample0, input.Texture);
	if (Alpha.c.x + Alpha.c.y + Alpha.c.z > 0)
		Alpha.c.w = 0.0f;
	//if (Alpha.c.w == 1.0f)
	//{
	//	Alpha.c.x = 1.0f;
	//	Alpha.c.y = 1.0f;
	//	Alpha.c.z = 1.0f;
	//}
	Alpha.c.w = 1.0f;
	return Alpha.c;
}