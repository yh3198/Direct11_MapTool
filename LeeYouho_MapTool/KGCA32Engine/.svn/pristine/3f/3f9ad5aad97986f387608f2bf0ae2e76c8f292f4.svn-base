/*텍스쳐 쉐이더*/
cbuffer cb0 /*상수버퍼*/
{
	matrix	g_matWorld		: packoffset(c0);
	matrix	g_matView		: packoffset(c4);
	matrix	g_matProj		: packoffset(c8);
	matrix  g_matNormal		: packoffset(c12);
};

struct VS_OUTPUT
{
	float4 Position : SV_POSITION; // 버텍스 포지션
	float3 Normal : NORMAL;		   // 버텍스 노멀
	float4 Diffuse : COLOR0;	   // 버텍스 색상값
	float2 Texture : TEXCOORD0;
};

struct VS_INPUT
{
	float3 p : POSITION;
	float3 n : NORMAL;
	float4 c : COLOR;
	float2 t : TEXTURE;
	float4x4 mTransform : mTransform;
	uint InstanceID : SV_InstanceID;
};

VS_OUTPUT VS(VS_INPUT vIn)
{
	VS_OUTPUT Output;
	float3 vPos = vIn.p;//* fTime;
	Output.Position = float4(vPos, 1.0f);
	//Output.Position = mul(Output.Position, g_matWorld);
	Output.Position = mul(Output.Position, vIn.mTransform);
	Output.Position = mul(Output.Position, g_matView);
	Output.Position = mul(Output.Position, g_matProj);
	//Output.Position.x = Output.Position.x + vIn.InstanceID * 10;
	//float4 vCol = c * fTime;
	//c.x = c.x +fTime;
	Output.Normal = float3(vIn.n);
	Output.Normal = mul(Output.Normal, (float3x3)g_matNormal);
	Output.Normal = normalize(Output.Normal);

	Output.Diffuse = float4(vIn.c);
	Output.Texture = float2(vIn.t);
	return Output;
}


Texture2D TexturePaguk : register (t0); // 텍스쳐 레지스터 0번의 값을 가져오겠다.
SamplerState Sample0 : register (s0);	// 텍스쳐를 컨트롤 하기 위한 변수

struct PS_OUTPUT
{
	float4 c : SV_Target;
};

float4 PS(VS_OUTPUT input) : SV_Target
{
	float3 vLight = float3(0,0,1);
	float fDot = dot(-vLight, input.Normal);

	PS_OUTPUT vOut;
	vOut.c = TexturePaguk.Sample(Sample0, input.Texture);
	//vOut.c = TexturePaguk.Sample(Sample0, input.Texture) * float4(fDot, fDot, fDot, 1.0f); // input.Diffuse *
	//vOut.c = float4(fDot, fDot, fDot, 1.0f);
	return vOut.c;
}