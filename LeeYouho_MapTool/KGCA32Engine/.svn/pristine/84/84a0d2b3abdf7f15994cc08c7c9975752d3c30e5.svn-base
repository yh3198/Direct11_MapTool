#include "Sample.h"

bool Sample::MapObjInfoSpreating()
{
	m_Select.SetMatrix(NULL, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj); //좌표계 일치 + 마우스 레이 받아오기
	m_viClosedIndex.clear();
	for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
	{
		for (int iCheckNode = 0; iCheckNode < m_vMapQuadTree[iMap]->m_DrawPatchNodeList.size(); iCheckNode++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[iCheckNode];
			if (m_Select.IntersectBox(&pNode->m_tBox))
			{
				int iIndex = iCheckNode;
				m_viClosedIndex.push_back(iIndex);
			}
		}
		if (!m_viClosedIndex.size())
		{
			return false;
		}

		/*충돌로 처리된 노드들을 거리에 따라 순서대로 정렬*/
		vector<int> m_iOrgiClosedIndex;
		while (m_viClosedIndex.size())
		{
			float PLength = 99999.9f;
			int iApplyIndex = 0;
			for (int iCheckNode = 0; iCheckNode < m_viClosedIndex.size(); iCheckNode++)
			{
				D3DXVECTOR3 Pvec = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_viClosedIndex[iCheckNode]]->m_tBox.vCenter - m_Select.m_Ray.vOrigin;
				float BLength = D3DXVec3Length(&Pvec);
				if (PLength > BLength)
				{
					iApplyIndex = iCheckNode;
				}
			}
			m_iOrgiClosedIndex.push_back(m_viClosedIndex[iApplyIndex]);
			vector<int>::iterator itor = m_viClosedIndex.begin();
			itor += iApplyIndex;
			m_viClosedIndex.erase(itor);
		}

		// m_iOrgiClosedIndex = 가까운 순서대로 정렬된 충돌된 노드
		for (int iApply = 0; iApply < m_iOrgiClosedIndex.size(); iApply++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_iOrgiClosedIndex[iApply]];
			m_vMapQuadTree[iMap]->GetLodType(pNode);
			D3DXVECTOR3 v0, v1, v2;
			int indexsize = m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType].size() / 3;
			for (int iFace = 0; iFace < indexsize; iFace++)
			{
				v0 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 0]].Position;
				v1 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 1]].Position;
				v2 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 2]].Position;
				if (m_Select.CheckPick(v0, v1, v2)) // 충돌지점이 판별 됐다면
				{
					float RootNodeSize = m_vMapQuadTree[iMap]->m_pRootNode->m_tBox.vMax.x - m_vMapQuadTree[iMap]->m_pRootNode->m_tBox.vMin.x;
					D3DXVECTOR3 Crash = m_Select.CrashPoint;
					
					Crash.x = Crash.x + (RootNodeSize / 2);
					Crash.z = Crash.z - (RootNodeSize / 2);
					Crash.z *= -1.0f;

					SpreatingBox.vMin.x = Crash.x - m_iSpreatingRange;
					SpreatingBox.vMin.z = Crash.z - m_iSpreatingRange;
					SpreatingBox.vMax.x = Crash.x + m_iSpreatingRange;
					SpreatingBox.vMax.z = Crash.z + m_iSpreatingRange;
					
					//Crash.x = Crash.x / RootNodeSize;
					//Crash.z = Crash.z / RootNodeSize;

					//SpreatingBox.vMin.x = SpreatingBox.vMin.x / RootNodeSize;
					//SpreatingBox.vMin.z = SpreatingBox.vMin.z / RootNodeSize;
					//SpreatingBox.vMax.x = SpreatingBox.vMax.x / RootNodeSize;
					//SpreatingBox.vMax.z = SpreatingBox.vMax.z / RootNodeSize;

					// uv값까지 생성완료
					m_vMapQuadTree[iMap]->ObjSpreating(m_pImmediateContext, SpreatingBox, Crash, m_iSpreatingRange, m_iObjSpreatingColor);
				}
			}
		}
	}
	return false;
}

bool Sample::MapSpreating()
{
	m_Select.SetMatrix(NULL, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj); //좌표계 일치 + 마우스 레이 받아오기
	m_viClosedIndex.clear();
	for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
	{
		for (int iCheckNode = 0; iCheckNode < m_vMapQuadTree[iMap]->m_DrawPatchNodeList.size(); iCheckNode++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[iCheckNode];
			if (m_Select.IntersectBox(&pNode->m_tBox))
			{
				int iIndex = iCheckNode;
				m_viClosedIndex.push_back(iIndex);
			}
		}
		if (!m_viClosedIndex.size())
		{
			return false;
		}

		/*충돌로 처리된 노드들을 거리에 따라 순서대로 정렬*/
		vector<int> m_iOrgiClosedIndex;
		while (m_viClosedIndex.size())
		{
			float PLength = 99999.9f;
			int iApplyIndex = 0;
			for (int iCheckNode = 0; iCheckNode < m_viClosedIndex.size(); iCheckNode++)
			{
				D3DXVECTOR3 Pvec = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_viClosedIndex[iCheckNode]]->m_tBox.vCenter - m_Select.m_Ray.vOrigin;
				float BLength = D3DXVec3Length(&Pvec);
				if (PLength > BLength)
				{
					iApplyIndex = iCheckNode;
				}
			}
			m_iOrgiClosedIndex.push_back(m_viClosedIndex[iApplyIndex]);
			vector<int>::iterator itor = m_viClosedIndex.begin();
			itor += iApplyIndex;
			m_viClosedIndex.erase(itor);
		}

		// m_iOrgiClosedIndex = 가까운 순서대로 정렬된 충돌된 노드
		for (int iApply = 0; iApply < m_iOrgiClosedIndex.size(); iApply++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_iOrgiClosedIndex[iApply]];
			m_vMapQuadTree[iMap]->GetLodType(pNode);
			D3DXVECTOR3 v0, v1, v2;
			int indexsize = m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType].size() / 3;
			for (int iFace = 0; iFace < indexsize; iFace++)
			{
				v0 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 0]].Position;
				v1 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 1]].Position;
				v2 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 2]].Position;
				if (m_Select.CheckPick(v0, v1, v2)) // 충돌지점이 판별 됐다면
				{
					float RootNodeSize = m_vMapQuadTree[iMap]->m_pRootNode->m_tBox.vMax.x - m_vMapQuadTree[iMap]->m_pRootNode->m_tBox.vMin.x;
					D3DXVECTOR3 Crash = m_Select.CrashPoint;
					Crash.z *= -1.0f;
					Crash.x = Crash.x + (RootNodeSize / 2);
					Crash.z = Crash.z + (RootNodeSize / 2);
					
					SpreatingBox.vMin.x = Crash.x - m_fSpreatingRadius;
					SpreatingBox.vMin.z = Crash.z - m_fSpreatingRadius;
					SpreatingBox.vMax.x = Crash.x + m_fSpreatingRadius;
					SpreatingBox.vMax.z = Crash.z + m_fSpreatingRadius;

					Crash.x = Crash.x / RootNodeSize;
					Crash.z = Crash.z / RootNodeSize;

					SpreatingBox.vMin.x = SpreatingBox.vMin.x / RootNodeSize;
					SpreatingBox.vMin.z = SpreatingBox.vMin.z / RootNodeSize;
					SpreatingBox.vMax.x = SpreatingBox.vMax.x / RootNodeSize;
					SpreatingBox.vMax.z = SpreatingBox.vMax.z / RootNodeSize;
					
					// uv값까지 생성완료
					if(!m_ModeGradient)
						m_vMapQuadTree[iMap]->Spreating(m_pImmediateContext, SpreatingBox, Crash, m_fSpreatingRadius, m_iSpreatingColor);
					else
						m_vMapQuadTree[iMap]->GradientSpreating(m_pImmediateContext, SpreatingBox, Crash, m_fSpreatingRadius, m_iSpreatingColor);
				}
			}
		}
	}
	return false;
}

bool Sample::MapHeightControl()
{
	//pNode->m_VertexList;
	// 이게 버텍스
	//m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType];
	// 이게 인덱스

	// 버텍스는 m_DrawNodeList가 들고 있고
	// 인덱스는 m_pdwLodIndexArray가 들고 있는데 몇번째 인덱스형태를 쓰는지 알아야 한다.
	// 몇번째 인덱스 레벨의 몇번째 타입을 쓰고있는지 알아야 한다.
	// 인덱스버퍼와 버텍스버퍼가 존재한다.
	m_Select.SetMatrix(NULL, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj); //좌표계 일치가 필요하다.
	D3DXVECTOR2 ControlBox;
	m_viClosedIndex.clear();
	for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
	{
		for (int iCheckNode = 0; iCheckNode < m_vMapQuadTree[iMap]->m_DrawPatchNodeList.size(); iCheckNode++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[iCheckNode];
			if (m_Select.IntersectBox(&pNode->m_tBox))
			{
				int iIndex = iCheckNode;
				m_viClosedIndex.push_back(iIndex);
			}
		}
		if (!m_viClosedIndex.size())
		{
			return false;
		}
		
		/*충돌로 처리된 노드들을 거리에 따라 순서대로 정렬*/
		vector<int> m_iOrgiClosedIndex;
		while (m_viClosedIndex.size())
		{
			float PLength = 99999.9f;
			int iApplyIndex = 0;
			for (int iCheckNode = 0; iCheckNode < m_viClosedIndex.size(); iCheckNode++)
			{
				D3DXVECTOR3 Pvec = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_viClosedIndex[iCheckNode]]->m_tBox.vCenter - m_Select.m_Ray.vOrigin;
				float BLength = D3DXVec3Length(&Pvec);
				if (PLength > BLength)
				{
					iApplyIndex = iCheckNode;
				}
			}
			m_iOrgiClosedIndex.push_back(m_viClosedIndex[iApplyIndex]);
			vector<int>::iterator itor = m_viClosedIndex.begin();
			itor += iApplyIndex;
			m_viClosedIndex.erase(itor);
		}

		for (int iApply = 0; iApply < m_iOrgiClosedIndex.size(); iApply++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_iOrgiClosedIndex[iApply]];
			m_vMapQuadTree[iMap]->GetLodType(pNode);
			D3DXVECTOR3 v0, v1, v2;
			int indexsize = m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType].size() / 3;
			for (int iFace = 0; iFace < indexsize; iFace++)
			{
				v0 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 0]].Position;
				v1 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 1]].Position;
				v2 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 2]].Position;
				if (m_Select.CheckPick(v0, v1, v2))
				{
					if (m_VCtrlState == vUp || m_VCtrlState == vDown) // up Down일 경우
					{
						ControlBox = ChangeYPosition(m_Select.CrashPoint, &pNode->m_VertexList);
						if (pNode->m_tBox.vMax.y < ControlBox.x)
						{
							pNode->m_tBox.vMax.y = ControlBox.x;
							pNode->m_tBox.vCenter.y = (pNode->m_tBox.vMax.y + pNode->m_tBox.vMin.y) / 2;
							pNode->m_tBox.fExtent[1] = pNode->m_tBox.vMax.y - pNode->m_tBox.vCenter.y;
						}
						if (pNode->m_tBox.vMin.y > ControlBox.y)
						{
							pNode->m_tBox.vMin.y = ControlBox.y;
							pNode->m_tBox.vCenter.y = (pNode->m_tBox.vMax.y + pNode->m_tBox.vMin.y) / 2;
							pNode->m_tBox.fExtent[1] = pNode->m_tBox.vMax.y - pNode->m_tBox.vCenter.y;
						}
						ControlBox.x = 0;
						ControlBox.y = 0;
						pNode->m_pVertexBuffer.Attach(m_vMapQuadTree[iMap]->CreateVertexBuffer(m_pd3dDevice, &pNode->m_VertexList.at(0), pNode->m_VertexList.size(), sizeof(PNCT_Vertex)));
						for (int iNeighbor = 0; iNeighbor < pNode->m_NeighborList.size(); iNeighbor++)
						{
							if (pNode->m_NeighborList[iNeighbor] != NULL)
							{
								ControlBox = ChangeYPosition(m_Select.CrashPoint, &pNode->m_NeighborList[iNeighbor]->m_VertexList);
								if (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y < ControlBox.x)
								{
									pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y = ControlBox.x;
									pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y = (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y + pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y) / 2;
									pNode->m_NeighborList[iNeighbor]->m_tBox.fExtent[1] = pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y - pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y;
								}
								if (pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y > ControlBox.y)
								{
									pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y = ControlBox.y;
									pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y = (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y + pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y) / 2;
									pNode->m_NeighborList[iNeighbor]->m_tBox.fExtent[1] = pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y - pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y;
								}
								ControlBox.x = 0;
								ControlBox.y = 0;
								pNode->m_NeighborList[iNeighbor]->m_pVertexBuffer.Attach(m_vMapQuadTree[iMap]->
									CreateVertexBuffer(m_pd3dDevice, &pNode->m_NeighborList[iNeighbor]->
										m_VertexList.at(0), pNode->m_NeighborList[iNeighbor]->m_VertexList.size(), sizeof(PNCT_Vertex)));
							}
						}
						return true;
					}
					else // Parallel일 경우
					{
						ControlBox = ChangeYParallel(m_Select.CrashPoint, &pNode->m_VertexList);
						if (pNode->m_tBox.vMax.y < ControlBox.x)
						{
							pNode->m_tBox.vMax.y = ControlBox.x;
							pNode->m_tBox.vCenter.y = (pNode->m_tBox.vMax.y + pNode->m_tBox.vMin.y) / 2;
							pNode->m_tBox.fExtent[1] = pNode->m_tBox.vMax.y - pNode->m_tBox.vCenter.y;
						}
						if (pNode->m_tBox.vMin.y > ControlBox.y)
						{
							pNode->m_tBox.vMin.y = ControlBox.y;
							pNode->m_tBox.vCenter.y = (pNode->m_tBox.vMax.y + pNode->m_tBox.vMin.y) / 2;
							pNode->m_tBox.fExtent[1] = pNode->m_tBox.vMax.y - pNode->m_tBox.vCenter.y;
						}
						ControlBox.x = 0;
						ControlBox.y = 0;
						pNode->m_pVertexBuffer.Attach(m_vMapQuadTree[iMap]->CreateVertexBuffer(m_pd3dDevice, &pNode->m_VertexList.at(0), pNode->m_VertexList.size(), sizeof(PNCT_Vertex)));
						for (int iNeighbor = 0; iNeighbor < pNode->m_NeighborList.size(); iNeighbor++)
						{
							if (pNode->m_NeighborList[iNeighbor] != NULL)
							{
								ControlBox = ChangeYParallel(m_Select.CrashPoint, &pNode->m_NeighborList[iNeighbor]->m_VertexList);
								if (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y < ControlBox.x)
								{
									pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y = ControlBox.x;
									pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y = (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y + pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y) / 2;
									pNode->m_NeighborList[iNeighbor]->m_tBox.fExtent[1] = pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y - pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y;
								}
								if (pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y > ControlBox.y)
								{
									pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y = ControlBox.y;
									pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y = (pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y + pNode->m_NeighborList[iNeighbor]->m_tBox.vMin.y) / 2;
									pNode->m_NeighborList[iNeighbor]->m_tBox.fExtent[1] = pNode->m_NeighborList[iNeighbor]->m_tBox.vMax.y - pNode->m_NeighborList[iNeighbor]->m_tBox.vCenter.y;
								}
								ControlBox.x = 0;
								ControlBox.y = 0;
								pNode->m_NeighborList[iNeighbor]->m_pVertexBuffer.Attach(m_vMapQuadTree[iMap]->
									CreateVertexBuffer(m_pd3dDevice, &pNode->m_NeighborList[iNeighbor]->
										m_VertexList.at(0), pNode->m_NeighborList[iNeighbor]->m_VertexList.size(), sizeof(PNCT_Vertex)));
							}
						}
						bParallel = true;
						return true;
					}
				}
			}
		}
	}
	return false;
}


D3DXVECTOR2 Sample::ChangeYPosition(D3DXVECTOR3 CPos, vector<PNCT_Vertex>* VertexList)
{
	D3DXVECTOR2 ControlBox;
	ControlBox.x = -99999.9f; // MAX
	ControlBox.y = 99999.9f; // MIN
	float HeightControl = 0.0f;
	if (m_VCtrlState == vUp)
	{
		HeightControl = 1.0f * g_fSecPerFrame * m_fHeightValue;
	}
	else //(m_VCtrlState == vDown)
	{
		HeightControl = -1.0f * g_fSecPerFrame * m_fHeightValue;
	}
	for (int iVer = 0; iVer < VertexList->size(); iVer++)
	{
		D3DXVECTOR3 Va = CPos;
		D3DXVECTOR3 Vb = VertexList[0][iVer].Position;
		Va.y = 0.0f;
		Vb.y = 0.0f;
		D3DXVECTOR3 LengthTemp = Va - Vb;
		float length = D3DXVec3Length(&LengthTemp);
		length = length / m_fRadius;
		if (length < 1.0f)
		{
			length *= 90;
			double pi = 3.141592;
			length = pi * length / 180.0;
			length = cosf(length); 
			length *= HeightControl; // 높이 변화율 추가요망
			
			VertexList[0][iVer].Position.y += length;

			if (ControlBox.x < VertexList[0][iVer].Position.y)
			{
				ControlBox.x = VertexList[0][iVer].Position.y;
			}
			if (ControlBox.y > VertexList[0][iVer].Position.y)
			{
				ControlBox.y = VertexList[0][iVer].Position.y;
			}
		}
	}
	return ControlBox;
}

D3DXVECTOR2 Sample::ChangeYParallel(D3DXVECTOR3 CPos, vector<PNCT_Vertex>* VertexList)
{
	D3DXVECTOR2 ControlBox;
	ControlBox.x = -99999.9f; // MAX
	ControlBox.y = 99999.9f; // MIN
	float HeightControl = 0.0f;
	if (m_VCtrlState == vUp)
	{
		HeightControl = 1.0f;
	}
	else //(m_VCtrlState == vDown)
	{
		HeightControl = -1.0f;
	}
	for (int iVer = 0; iVer < VertexList->size(); iVer++)
	{
		D3DXVECTOR3 Va = CPos;
		D3DXVECTOR3 Vb = VertexList[0][iVer].Position;
		Va.y = 0.0f;
		Vb.y = 0.0f;
		D3DXVECTOR3 LengthTemp = Va - Vb;
		float length = D3DXVec3Length(&LengthTemp);
		length = length / m_fRadius;
		if (length < 1.0f)
		{
			if (bParallel) //이전과 같은값을 적용
			{
				VertexList[0][iVer].Position.y = fParallel;
				if (ControlBox.x < VertexList[0][iVer].Position.y)
				{
					ControlBox.x = VertexList[0][iVer].Position.y;
				}
				if (ControlBox.y > VertexList[0][iVer].Position.y)
				{
					ControlBox.y = VertexList[0][iVer].Position.y;
				}
			}
			else
			{
				VertexList[0][iVer].Position.y = CPos.y;
				fParallel = CPos.y;
				if (ControlBox.x < VertexList[0][iVer].Position.y)
				{
					ControlBox.x = VertexList[0][iVer].Position.y;
				}
				if (ControlBox.y > VertexList[0][iVer].Position.y)
				{
					ControlBox.y = VertexList[0][iVer].Position.y;
				}
			}
		}
	}
	return ControlBox;
}

bool Sample::CreateMap(int iCellCount, int iPatchCount, float fCellDistance, TCHAR** MapTexture, int TextureCount, TCHAR* HeightMapTex)
{
	m_MFCMapInfo = new BMapDesc;
	m_MFCMapInfo->iCellCount = iCellCount;
	m_MFCMapInfo->iPatchCount = iPatchCount;
	m_MFCMapInfo->fCellDistance = fCellDistance;
	m_vMFCMapInfo.push_back(m_MFCMapInfo);

	m_MFCMap = new BMap;
	m_MFCMap->SetMapDesc(*m_MFCMapInfo);
	m_MFCMap->Create(m_pd3dDevice, m_pImmediateContext, MapTexture, TextureCount, HeightMapTex, L"../../data/shader/NormalShader.hlsl");
	m_MFCMap->UpdateNormal();
	m_vMapTexture.push_back(MapTexture[0]);
	m_vMFCMap.push_back(m_MFCMap);
	
	CreateQuadTree(2, 1, m_MFCMap); // 여기서 최대 깊이설정 & 최소 분할사이즈를 조정 가능 == MFC에서 넘겨주도록 해야한다.

	// m_MFCWaterMap은 워터를 표현할 맵입니다.
	m_MFCWaterMapInfo = new BMapDesc;
	m_MFCWaterMapInfo->iCellCount = iCellCount;
	m_MFCWaterMapInfo->iPatchCount = iPatchCount;
	m_MFCWaterMapInfo->fCellDistance = fCellDistance;

	m_MFCWaterMap = new BNMap;
	m_MFCWaterMap->SetMapDesc(*m_MFCWaterMapInfo);
	m_MFCWaterMap->Create(m_pd3dDevice, m_pImmediateContext, MapTexture, TextureCount, HeightMapTex, L"../../data/shader/MapShader.hlsl");
	m_MFCWaterMap->UpdateNormal();
	m_vMFCWaterMap.push_back(m_MFCWaterMap);
	return true;
}

bool Sample::CreateWaterMap(BMapTileRender* SelectedMap, int iMaxDepthLimit, float fMinDivideSize, int iSelectedMap, TCHAR* WaterTex, TCHAR* WaterNormalTex, float fHeight, float fWave)
{
	if (m_vMFCWaterMap.size())
	{
		m_WaterMapQuadTree = new BWaterMap;
		m_WaterMapQuadTree->m_fWaterHeight = fHeight;
		m_WaterMapQuadTree->m_fWaterWave = fWave;
		m_WaterMapQuadTree->m_iMaxDepthLimit = iMaxDepthLimit;
		m_WaterMapQuadTree->m_fMinDivideSize = fMinDivideSize;
		m_WaterMapQuadTree->Update(m_pd3dDevice, m_pMainCamera, SelectedMap);
		m_WaterMapQuadTree->Build(m_vMFCWaterMap[iSelectedMap], m_vMFCWaterMap[iSelectedMap]->m_iNumCols, 
			m_vMFCWaterMap[iSelectedMap]->m_iNumRows, m_pImmediateContext, WaterTex, WaterNormalTex);
		m_WaterMapQuadTree->m_pWaterReflectMap = m_vMapQuadTree[m_vMFCWaterMap.size() - 1];
		for (int imap = 0; imap < 3; imap++)
		{
			if (!m_WaterMapQuadTree->m_MiniMap[imap].Create(m_pd3dDevice, L"../../data/shader/TestShader.hlsl"))
			{
				return false;
			}
			m_WaterMapQuadTree->m_MiniMap[imap].Set(m_pd3dDevice, 0, imap * 200, 200, 200);
		}
		m_vWaterQuadTree.push_back(m_WaterMapQuadTree);
	}
	return false;
}

bool Sample::CreateQuadTree(int iMaxDepthLimit, float fMinDivideSize, BMap* Map)
{
	m_MapQuadTree = new BMapTileRender;
	m_MapQuadTree->m_iMaxDepthLimit = iMaxDepthLimit;
	m_MapQuadTree->m_fMinDivideSize = fMinDivideSize;
	m_MapQuadTree->Update(m_pd3dDevice, m_pMainCamera);
	m_MapQuadTree->Build(Map, Map->m_iNumCols, Map->m_iNumRows, m_pImmediateContext);
	m_MapQuadTree->CreateSpreatingTexture();
	// 나중에 맵이 여러개 생성되었을 때 변경해주어야한다. 지금은 기본 생성된 0번맵을 넣어줄 것이다.
	m_iSelectedMap = 0; //0번맵
	m_bSelectedMap = m_MapQuadTree; // 지금은 기본 생성된 맵을 바로 넣어주고 있다.
	m_vMapQuadTree.push_back(m_MapQuadTree);
	return true;
}


bool Sample::Init()
{
	/*맵 오브젝트*/
	m_HouseObj.Load(m_pd3dDevice, _T("../../data/abandoned_house.ASE"));
	m_RuinHouseObj.Load(m_pd3dDevice, _T("../../data/Ruin_House.ASE"));
	m_TreeObj.Load(m_pd3dDevice, _T("../../data/Tree1.ASE"));
	m_RuinHouseObj.InitInstanceBuffer(1);
	m_RuinHouseObj.m_InstanceInfo[0].Translate = D3DXVECTOR3(70.2f, 0.0f, 100.6f);
	m_RuinHouseObj.m_InstanceInfo[0].Angle = 4.71f;
	m_RuinHouseObj.m_InstanceInfo[0].RotationAxis = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	m_HouseObj.InitInstanceBuffer(2);
	m_HouseObj.m_InstanceInfo[0].Translate = D3DXVECTOR3(99.4f, 0.0f, 84.6f);
	m_HouseObj.m_InstanceInfo[1].Translate = D3DXVECTOR3(-24.2f, 0.0f, 95.77f);

	m_HouseObj.Frame();
	m_RuinHouseObj.Frame();
	m_TreeObj.Frame();

	/*MFC용*/
	m_VCtrlState = 0;
	m_fHeightValue = 1.0f;
	bParallel = false;
	m_fRadius = 3.0f;
	m_fSpreatingRadius = 3.0f;
	m_VSpreatState = vSpreatNone;
	m_VObjSpreatState = vSpreatNone;
	m_Exporter.SetExporter(m_pImmediateContext, L"MapExportFile.txt");
	
	// 그라디언트용 변수
	ColoringCnt = 0;
	m_ModeGradient = false;
	
	// 워터맵 라이트
	m_vInitLightPos = D3DXVECTOR3(300.0f, 300.0f, 0.0f);
	
	// 맵 세팅용
	m_MapSettingRenderMode = false;
	m_MapSetting.Init(m_pMainCamera, m_pd3dDevice, m_pImmediateContext);

	// 맵 오브젝트 포지션용 임시변수
	MapObjCount = 0;
	ObjSettingMode = false;
	ObjSelectingMode = false;
	ObjCreateOne = false;
	return true;
}

bool Sample::Frame()
{
	/*맵 오브젝트*/
	//m_HouseObj.Frame();
	//m_RuinHouseObj.Frame();
	//m_TreeObj.Frame();
	//// 맵 세팅용
	//if (m_MapSetting.BMapSettingMode)
	//{
	//	if (m_vMapQuadTree.size())
	//	{
	//		if (!m_MapSetting.BLastCheck && I_Input.m_MFCDIMouseState[0] == KEY_PUSH) // 키PUSH가 눌렸을 때 첫번째 좌표를 받아온다
	//		{
	//			m_MapSetting.FirstPointFind(m_vMapQuadTree[0]);
	//		}
	//		if (m_MapSetting.BLastCheck && I_Input.m_MFCDIMouseState[0] == KEY_FREE) // 키FREE가 될 경우 Last좌표를 받아온다.
	//		{
	//			m_MapSetting.LastPointFind(m_vMapQuadTree[0]);
	//		}
	//	}
	//}

	if (m_MapSetting.BMapSettingMode)
	{
		if (m_vMapQuadTree.size())
		{
			m_MapSetting.SettingMap(m_vMapQuadTree[0]);
		}
	}

	// 이 코드는 임시코드입니다. 적용 버튼을 누르면 해당 함수가 실행되도록 만들어야 합니다.
	if (m_MapSetting.m_SelectedMap && m_MapSetting.BApply)
	{
		m_MapSetting.MapInfoSetting();
	}


	/*MFC맵 띄우기*/
	//if (m_pMainCamera->bCameraChange)
	{
		for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
		{
			m_vMapQuadTree[iMap]->Frame(m_pMainCamera);
		}
		for (int iMap = 0; iMap < m_vWaterQuadTree.size(); iMap++)
		{
			m_vWaterQuadTree[iMap]->Frame(m_pMainCamera);
			m_vWaterQuadTree[iMap]->WaterFrame(m_ViewPort, m_pDepthStencilView, m_pRenderTargetView);
		}
	}
	/*맵 높이 조절하기*/
	if (m_VCtrlState && I_Input.m_MFCDIMouseState[0] == KEY_PUSH)
	{
		MapHeightControl();
		if (m_vWaterQuadTree.size())
		{
			m_vWaterQuadTree[0]->bHeightChange = true;
		}
	}

	/*라이트 계산*/ 
	// 라이트 클래스가 만들어지면 이를 추가시켜야 한다.
	// 라이트 계산 & 상수 데이터 생성
	float t = g_fDurationTime * D3DX_PI;
	D3DXMATRIX mTranslate, mRotation;
	D3DXMatrixTranslation(&mTranslate, m_vInitLightPos.x, m_vInitLightPos.y, m_vInitLightPos.z);
	D3DXMatrixRotationY(&mRotation, t*0.02f);
	D3DXMatrixMultiply(&m_mLightWorld, &mTranslate, &mRotation);
	m_LightPos.x = m_mLightWorld._41;
	m_LightPos.y = m_mLightWorld._42;
	m_LightPos.z = m_mLightWorld._43;
	D3DXVec3Normalize(&m_vDirection, &m_LightPos);
	m_vDirection *= -1.0f;
	if (m_vWaterQuadTree.size())
	{
		m_vWaterQuadTree[0]->m_TanLight.matNormal = m_vWaterQuadTree[0]->m_matNormal;
		m_vWaterQuadTree[0]->m_TanLight.vLightPos = D3DXVECTOR4(m_vDirection, 0.0f);
		m_vWaterQuadTree[0]->m_TanLight.vEye = D3DXVECTOR4(m_pMainCamera->m_vPos, 0.0f);
		m_vWaterQuadTree[0]->m_TanLight.vEyeDir = D3DXVECTOR4(m_pMainCamera->m_vLook, 0.0f);
		m_pImmediateContext->UpdateSubresource(m_vWaterQuadTree[0]->m_pTanLightCB.Get(), 0, NULL, &m_vWaterQuadTree[0]->m_TanLight, 0, 0);
	}

	// 캐릭터의 높이를 구하는 함수 
	//if (m_MapSetting.m_SelectedMap)
	//{
	//	float HeroH = GetHeight(D3DXVECTOR3(0.3f, 0.0f, -0.2f));
	//}
	
	// 맵 오브젝트 세팅용 임시
	if (ObjSettingMode && ObjCreateOne)
	{
		if (GetMapObjectPosition())
		{
			m_TreeObj.InitInstanceBuffer(MapObjCount);
			for (int iCnt = 0; iCnt < m_TreeObj.m_InstanceInfo.size(); iCnt++)
			{
				m_TreeObj.m_InstanceInfo[iCnt].Translate = m_MapObjPosition[iCnt];
			}
			ObjCreateOne = false;
		}
	}

	// 오브젝트 선택하기
	if (ObjSelectingMode && I_Input.m_MFCDIMouseState[0] == KEY_PUSH)
	{
		SelectMapObj();
	}

	return true;
}

bool Sample::Render()
{
	/*Spreating*/
	if (m_VSpreatState && I_Input.m_MFCDIMouseState[0] == KEY_PUSH && m_ModeGradient == false)
	{
		MapSpreating();
	}

	//GradientSpreating
	if (m_VSpreatState && I_Input.m_MFCDIMouseState[0] == KEY_PUSH && m_ModeGradient == true && ColoringCnt < 1)
	{
		MapSpreating();
		ColoringCnt++;
	}

	/*ObjSpreating*/
	if (m_VObjSpreatState && I_Input.m_MFCDIMouseState[0] == KEY_PUSH)
	{
		MapObjInfoSpreating();
	}

	if (m_MapSettingRenderMode)
	{
		for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
		{
			if (m_VObjSpreatState)
			{
				//m_vMapQuadTree[iMap]->CreateSRV(m_vMapQuadTree[iMap]->ObjPosTexture, m_vMapQuadTree[iMap]->Objdesc);
			}
			if (m_VSpreatState)
			{
				//m_vMapQuadTree[iMap]->CreateSRV(m_vMapQuadTree[iMap]->SpreatingTexTure, m_vMapQuadTree[iMap]->desc);
			}
			m_vMapQuadTree[iMap]->m_pMap->SetMatrix(&m_vMapQuadTree[iMap]->m_pMap->m_matWorld, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj);
			m_vMapQuadTree[iMap]->AlphaRender(m_pImmediateContext);
		}
	}
	else
	{
		/*MFC맵 띄우기*/
		for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
		{
			m_vMapQuadTree[iMap]->m_pMap->SetMatrix(&m_vMapQuadTree[iMap]->m_pMap->m_matWorld, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj);
			m_vMapQuadTree[iMap]->Render(m_pImmediateContext);
		}
	}
	
	/*MFC워터맵 띄우기*/
	for (int iWaterMap = 0; iWaterMap < m_vWaterQuadTree.size(); iWaterMap++)
	{
		// 수면의 높이 변화
		float w = -m_vWaterQuadTree[0]->m_fWaterHeight + cosf(g_fDurationTime) * m_vWaterQuadTree[0]->m_fWaterWave * 0.2f;
		D3DXMATRIX matWaterWorld;
		D3DXMatrixIdentity(&matWaterWorld);
		matWaterWorld._42 = -w;

		m_vWaterQuadTree[iWaterMap]->m_Fog.g_ClipPlane = D3DXVECTOR4(0.0f, 1.0f, 0.0f, m_vWaterQuadTree[iWaterMap]->m_fWaterHeight);
		m_vWaterQuadTree[iWaterMap]->m_WaterBottomSRV = m_vWaterQuadTree[iWaterMap]->m_MiniMap[1].m_pMiniMapRT->m_pSRV;
		m_vWaterQuadTree[iWaterMap]->m_WaterMapUpsideSRV = m_vWaterQuadTree[iWaterMap]->m_MiniMap[2].m_pMiniMapRT->m_pSRV;
		m_pImmediateContext->UpdateSubresource(m_vWaterQuadTree[iWaterMap]->m_pFogCB.Get(), 0, NULL, &m_vWaterQuadTree[iWaterMap]->m_Fog, 0, 0);
		m_vWaterQuadTree[iWaterMap]->SetWaterMatrix(&matWaterWorld, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj);
		m_vWaterQuadTree[iWaterMap]->Render();

		/*확인용 랜더*/
		m_vWaterQuadTree[iWaterMap]->m_MiniMap[0].Render(m_pImmediateContext);
		m_pImmediateContext->RSSetViewports(1, &m_ViewPort);
		m_vWaterQuadTree[iWaterMap]->m_MiniMap[1].Render(m_pImmediateContext);
		m_pImmediateContext->RSSetViewports(1, &m_ViewPort);
		m_vWaterQuadTree[iWaterMap]->m_MiniMap[2].Render(m_pImmediateContext);
		m_pImmediateContext->RSSetViewports(1, &m_ViewPort);
	}

	/*맵 오브젝트*/
	m_HouseObj.SetCamera(m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	m_RuinHouseObj.SetCamera(m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	m_TreeObj.SetCamera(m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	m_HouseObj.Render(m_pImmediateContext, m_HouseObj.m_InstanceInfo.size());
	m_RuinHouseObj.Render(m_pImmediateContext, m_RuinHouseObj.m_InstanceInfo.size());
	m_TreeObj.Render(m_pImmediateContext, m_TreeObj.m_InstanceInfo.size());

	m_HouseObj.RenderBoundingBoxLine(m_pImmediateContext, m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	m_RuinHouseObj.RenderBoundingBoxLine(m_pImmediateContext, m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	m_TreeObj.RenderBoundingBoxLine(m_pImmediateContext, m_pMainCamera->m_matView, m_pMainCamera->m_matProj);
	return true;
}

bool Sample::Release()
{
	return true;
}

bool Sample::MapExport()
{
	// 이하 코드는 1개의 맵만을 export하는 코드입니다.
	// 다수의 맵을 export하기 위해서는 변경이 필요합니다.
	m_Exporter.SetExporter(m_pImmediateContext, L"../../data/SaveExport.txt");
	m_Exporter.ExpMapObjInfo(m_MapObjPosition);
	m_Exporter.ExpAlphaMapTex(m_vMapQuadTree[0]->SpreatingTexTure);
	m_Exporter.ExpSpawnMapTex(m_vMapQuadTree[0]->ObjPosTexture);
	if (m_vMapTexture.size())
	{
		m_vMapTexture.resize(1);
	}
	m_Exporter.ExpTexName(m_vMapTexture[0], m_mMapSplattingTexture);
	if (m_vWaterQuadTree.size())
	{
		m_Exporter.ExpWaterMapInfo(m_vWaterQuadTree[0]->m_iSelectedMap, m_vWaterQuadTree[0]->m_strWaterTex,
			m_vWaterQuadTree[0]->m_strWaterNormalTex, m_vWaterQuadTree[0]->m_fWaterHeight, m_vWaterQuadTree[0]->m_fWaterWave);
	}
	m_Exporter.ExpMapInfo(m_vMFCMapInfo[0]);
	m_Exporter.ExpHeightTotal(m_vMapQuadTree[0]->m_pRootNode);
	if (!m_Exporter.m_pStream) return false;
	fclose(m_Exporter.m_pStream);
	return true;
}

bool Sample::MapImport(TCHAR* ImportFile)
{
	if (!m_Importer.OpenStream(ImportFile, m_pd3dDevice, m_pImmediateContext, m_pMainCamera))
	{
		return false;
	}
	m_Importer.LoadMapObj(&m_MapObjPosition);
	m_TreeObj.InitInstanceBuffer(m_MapObjPosition.size());
	MapObjCount = m_MapObjPosition.size();
	for (int iCnt = 0; iCnt < m_TreeObj.m_InstanceInfo.size(); iCnt++)
	{
		m_TreeObj.m_InstanceInfo[iCnt].Translate = m_MapObjPosition[iCnt];
	}
	m_Importer.LoadMap(&m_vMFCMap, &m_vMFCMapInfo, &m_vMapQuadTree, &m_vMapTexture, &m_mMapSplattingTexture, &m_vWaterQuadTree);
	m_bSelectedMap = m_vMapQuadTree[0];
	m_MapSetting.SettingMap(m_vMapQuadTree[0]);
	m_MapSetting.MapInfoSetting();
	m_MapSetting.SettingSoundInfo();
	m_MapSetting.SettingObjInfo();
	CreateNormal();

	//워터맵용 임시코드
	m_bSelectedMap = m_vMapQuadTree[0];
	m_MFCWaterMapInfo = new BMapDesc;
	m_MFCWaterMapInfo->iCellCount = m_vMFCMapInfo[0]->iCellCount;
	m_MFCWaterMapInfo->iPatchCount = m_vMFCMapInfo[0]->iPatchCount;
	m_MFCWaterMapInfo->fCellDistance = m_vMFCMapInfo[0]->fCellDistance;

	m_MFCWaterMap = new BNMap;
	m_MFCWaterMap->SetMapDesc(*m_MFCWaterMapInfo);
	m_MFCWaterMap->Create(m_pd3dDevice, m_pImmediateContext, &m_mMapSplattingTexture[0], 1, NULL, L"../../data/shader/MapShader.hlsl");
	m_MFCWaterMap->UpdateNormal();
	m_vMFCWaterMap.push_back(m_MFCWaterMap);

	m_vWaterQuadTree[0]->m_iMaxDepthLimit = m_vMapQuadTree[m_vWaterQuadTree[0]->m_iSelectedMap]->m_iMaxDepthLimit;
	m_vWaterQuadTree[0]->m_fMinDivideSize = m_vWaterQuadTree[0]->m_fWaterWave;
	m_vWaterQuadTree[0]->Update(m_pd3dDevice, m_pMainCamera, m_vMapQuadTree[m_vWaterQuadTree[0]->m_iSelectedMap]);
	m_vWaterQuadTree[0]->Build(m_vMFCWaterMap[m_vWaterQuadTree[0]->m_iSelectedMap], m_vMFCWaterMap[m_vWaterQuadTree[0]->m_iSelectedMap]->m_iNumCols,
		m_vMFCWaterMap[m_vWaterQuadTree[0]->m_iSelectedMap]->m_iNumRows, m_pImmediateContext, m_vWaterQuadTree[0]->m_strWaterTex, m_vWaterQuadTree[0]->m_strWaterNormalTex);
	m_vWaterQuadTree[0]->m_pWaterReflectMap = m_vMapQuadTree[m_vMFCWaterMap.size() - 1];
	for (int imap = 0; imap < 3; imap++)
	{
		if (!m_vWaterQuadTree[0]->m_MiniMap[imap].Create(m_pd3dDevice, L"../../data/shader/TestShader.hlsl"))
		{
			return false;
		}
		m_vWaterQuadTree[0]->m_MiniMap[imap].Set(m_pd3dDevice, 0, imap * 200, 200, 200);
	}
	return true;
}

bool Sample::GetSplattingTexName(int Color, TCHAR** Name)
{
	m_mMapSplattingTexture[Color] = Name[0];
	Text.push_back(Name[0]);
	return true;
}

D3DXVECTOR4 Sample::GetHeight(D3DXVECTOR3 HeroPos)
{
	int iXindex;
	int iZindex;
	float fXDetailPoint;
	float fZDetailPoint;
	float fCellDistance = m_MapSetting.m_SelectedMap->m_pMap->m_fCellDistance;
	int iChangePoint = m_MapSetting.m_SelectedMap->m_pRootNode->m_tBox.fExtent[0];
	int HeroAddress;

	iXindex = (HeroPos.x + iChangePoint) / fCellDistance;
	iZindex = ((HeroPos.z - iChangePoint) * -1.0f) / fCellDistance;
	fXDetailPoint = HeroPos.x - (int)HeroPos.x;
	fZDetailPoint = HeroPos.z - (int)HeroPos.z;

	if (fXDetailPoint > 0 && fZDetailPoint < 0) // 2사분면
	{
		fZDetailPoint = 1 + fZDetailPoint;
	}

	if (fXDetailPoint < 0 && HeroPos.z < 0) // 3사분면
	{
		fXDetailPoint = 1 + fXDetailPoint;
		fZDetailPoint = 1 + fZDetailPoint;
	}

	if (fXDetailPoint < 0 && HeroPos.z > 0) // 4사분면
	{
		fXDetailPoint = 1 + fXDetailPoint;
	}

	HeroAddress = m_MapSetting.m_MapAddress[iZindex][iXindex];

	float fResultHeight = 0.0f;
	float Left = m_MapSetting.m_TileInfo[HeroAddress].TileEdge[0].y - m_MapSetting.m_TileInfo[HeroAddress].TileEdge[2].y;
	float ResultLeft = Left*fZDetailPoint + m_MapSetting.m_TileInfo[HeroAddress].TileEdge[2].y;
	float Right = m_MapSetting.m_TileInfo[HeroAddress].TileEdge[1].y - m_MapSetting.m_TileInfo[HeroAddress].TileEdge[3].y;
	float ResultRight = Right*fZDetailPoint + m_MapSetting.m_TileInfo[HeroAddress].TileEdge[3].y;
	float CenterResult = ResultLeft + (ResultRight - ResultLeft) * fXDetailPoint;

	D3DXVECTOR3 TempNormal;
	if (fXDetailPoint + fZDetailPoint < 1.0f)
		TempNormal = m_MapSetting.m_TileInfo[HeroAddress].TileNormal[0];
	else
		TempNormal = m_MapSetting.m_TileInfo[HeroAddress].TileNormal[1];

	D3DXVECTOR4 Result;
	Result.x = TempNormal.x;
	Result.y = TempNormal.y;
	Result.z = TempNormal.z;
	Result.w = CenterResult;

	return Result;
}

void Sample::CreateNormal()
{
	if (m_vMapQuadTree.size() < 1)
		return;
	else
	{
		CalcNormal(m_vMapQuadTree[0]->m_pRootNode, (m_vMapQuadTree[0]->m_dwWidth - 1) / 2);
	}
}

void Sample::CalcNormal(BNode* pNode, int iRatio)
{
	if (pNode->m_pChild[0] != NULL)
	{
		for (int iNode = 0; iNode < 4; iNode++)
		{
			CalcNormal(pNode->m_pChild[iNode], iRatio);
		}
	}
	else
	{
		int iAround = 0;
		for (int iNor = 0; iNor < pNode->m_VertexList.size(); iNor++)
		{
			int x = pNode->m_VertexList[iNor].Position.x;
			int z = pNode->m_VertexList[iNor].Position.z;
			x = x + iRatio;
			z = (z - iRatio) * -1;
			if (x == iRatio * 2)
			{
				x--;
			}
			if (z == iRatio * 2)
			{
				z--;
			}
			D3DXVECTOR3 avgNormal;
			avgNormal = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
			// 1번 타일
			if (x > 1 && z > 1)
			{
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z - 1][x - 1]].TileNormal[1];
				iAround++;
			}
			// 2번 3번 타일
			if (z > 1)
			{
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z - 1][x]].TileNormal[0];
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z - 1][x]].TileNormal[1];
				iAround++;
				iAround++;
			}
			// 4번 5번 타일
			if (x > 1 && z < iRatio)
			{
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z][x - 1]].TileNormal[0];
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z][x - 1]].TileNormal[1];
				iAround++;
				iAround++;
			}
			if (x < iRatio && z < iRatio)
			{
				avgNormal = avgNormal + m_MapSetting.m_TileInfo[m_MapSetting.m_MapAddress[z][x]].TileNormal[0];
				iAround++;
			}
			avgNormal.x /= (float)iAround;
			avgNormal.y /= (float)iAround;
			avgNormal.z /= (float)iAround;
			D3DXVec3Normalize(&avgNormal, &avgNormal);
			
			pNode->m_VertexList[iNor].Normal.x = avgNormal.x;
			pNode->m_VertexList[iNor].Normal.y = avgNormal.y;
			pNode->m_VertexList[iNor].Normal.z = avgNormal.z;
		}
		m_pImmediateContext->UpdateSubresource(pNode->m_pVertexBuffer.Get(), 0, NULL, &pNode->m_VertexList[0], 0, 0);
	}
}

bool Sample::GetMapObjectPosition()
{
	m_Select.SetMatrix(NULL, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj); //좌표계 일치 + 마우스 레이 받아오기
	for (int iMap = 0; iMap < m_vMapQuadTree.size(); iMap++)
	{
		for (int iCheckNode = 0; iCheckNode < m_vMapQuadTree[iMap]->m_DrawPatchNodeList.size(); iCheckNode++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[iCheckNode];
			if (m_Select.IntersectBox(&pNode->m_tBox))
			{
				int iIndex = iCheckNode;
				m_viClosedIndex.push_back(iIndex);
			}
		}
		if (!m_viClosedIndex.size())
		{
			return false;
		}

		/*충돌로 처리된 노드들을 거리에 따라 순서대로 정렬*/
		vector<int> m_iOrgiClosedIndex;
		while (m_viClosedIndex.size())
		{
			float PLength = 99999.9f;
			int iApplyIndex = 0;
			for (int iCheckNode = 0; iCheckNode < m_viClosedIndex.size(); iCheckNode++)
			{
				D3DXVECTOR3 Pvec = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_viClosedIndex[iCheckNode]]->m_tBox.vCenter - m_Select.m_Ray.vOrigin;
				float BLength = D3DXVec3Length(&Pvec);
				if (PLength > BLength)
				{
					iApplyIndex = iCheckNode;
				}
			}
			m_iOrgiClosedIndex.push_back(m_viClosedIndex[iApplyIndex]);
			vector<int>::iterator itor = m_viClosedIndex.begin();
			itor += iApplyIndex;
			m_viClosedIndex.erase(itor);
		}

		// m_iOrgiClosedIndex = 가까운 순서대로 정렬된 충돌된 노드
		for (int iApply = 0; iApply < m_iOrgiClosedIndex.size(); iApply++)
		{
			BNode* pNode = m_vMapQuadTree[iMap]->m_DrawPatchNodeList[m_iOrgiClosedIndex[iApply]];
			m_vMapQuadTree[iMap]->GetLodType(pNode);
			D3DXVECTOR3 v0, v1, v2;
			int indexsize = m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType].size() / 3;
			for (int iFace = 0; iFace < indexsize; iFace++)
			{
				v0 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 0]].Position;
				v1 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 1]].Position;
				v2 = pNode->m_VertexList[m_vMapQuadTree[iMap]->m_pdwLodIndexArray[pNode->m_dwLodLevel]->IndexList[pNode->m_dwLodType][iFace * 3 + 2]].Position;
				if (m_Select.CheckPick(v0, v1, v2)) // 충돌지점이 판별 됐다면
				{
					MapObjCount++;
					m_MapObjPosition.resize(MapObjCount);
					m_MapObjPosition[MapObjCount - 1] = m_Select.CrashPoint;
					return true;
				}
			}
		}
	}
	return false;
}

// 오브젝트 선택함수
void Sample::SelectMapObj()
{
	int ObjTotal = 1;
	m_Select.SetMatrix(NULL, &m_pMainCamera->m_matView, &m_pMainCamera->m_matProj); //좌표계 일치 + 마우스 레이 받아오기
	for (int ObjCnt = 0; ObjCnt < 3; ObjCnt++) // 현재 사용중인 맵 오브젝트는 집, 파괴된 집, 나무 총 3가지기 때문에 3까지만 돈다.
	{
		switch (ObjCnt)
		{
		case 0:
			for (int iHouse = 0; iHouse < m_HouseObj.m_tBoundingBox.size(); iHouse++)
			{
				if (m_Select.IntersectBox(&m_HouseObj.m_tBoundingBox[iHouse]))
				{
					m_vSelectedObjInfo.resize(ObjTotal);
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjType = ObjCnt;
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjNum = iHouse;
					m_vSelectedObjInfo[ObjTotal - 1].m_fRange = D3DXVec3Length(&(m_HouseObj.m_tBoundingBox[iHouse].vCenter - m_Select.m_Ray.vOrigin));
					ObjTotal++;
				}
			}
			break;
		case 1:
			for (int iRHouse = 0; iRHouse < m_RuinHouseObj.m_tBoundingBox.size(); iRHouse++)
			{
				if (m_Select.IntersectBox(&m_RuinHouseObj.m_tBoundingBox[iRHouse]))
				{
					m_vSelectedObjInfo.resize(ObjTotal);
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjType = ObjCnt;
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjNum = iRHouse;
					m_vSelectedObjInfo[ObjTotal - 1].m_fRange = D3DXVec3Length(&(m_RuinHouseObj.m_tBoundingBox[iRHouse].vCenter - m_Select.m_Ray.vOrigin));
					ObjTotal++;
				}
			}
			break;
		case 2:
			for (int iTree = 0; iTree < m_TreeObj.m_tBoundingBox.size(); iTree++)
			{
				if (m_Select.IntersectBox(&m_TreeObj.m_tBoundingBox[iTree]))
				{
					m_vSelectedObjInfo.resize(ObjTotal);
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjType = ObjCnt;
					m_vSelectedObjInfo[ObjTotal - 1].m_iObjNum = iTree;
					m_vSelectedObjInfo[ObjTotal - 1].m_fRange = D3DXVec3Length(&(m_TreeObj.m_tBoundingBox[iTree].vCenter - m_Select.m_Ray.vOrigin));
					ObjTotal++;
				}
			}
			break;
		default:
			break;
		}
	}
	if (m_vSelectedObjInfo.size() < 2)
	{
		if (m_vSelectedObjInfo.size() > 0)
		{
			switch (m_vSelectedObjInfo[0].m_iObjType)
			{
			case 0:
				m_HouseObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
				break;
			case 1:
				m_RuinHouseObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
				break;
			case 2:
				m_TreeObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
				break;
			default:
				break;
			}
		}
		return;
	}
		
	else
	{
		int iSelectedObj = 0;
		for (int iSel = 1; iSel < m_vSelectedObjInfo.size(); iSel++)
		{
			if (m_vSelectedObjInfo[iSelectedObj].m_fRange < m_vSelectedObjInfo[iSel].m_fRange)
			{
				iSelectedObj = iSel;
			}
		}
		m_TempInfo = m_vSelectedObjInfo[iSelectedObj];
		m_vSelectedObjInfo.clear();
		m_vSelectedObjInfo.reserve(1);
		m_vSelectedObjInfo.push_back(m_TempInfo);
		switch (m_vSelectedObjInfo[0].m_iObjType)
		{
		case 0:
			m_HouseObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
			break;
		case 1:
			m_RuinHouseObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
			break;
		case 2:
			m_TreeObj.m_InstanceInfo[m_vSelectedObjInfo[0].m_iObjNum].Selected = true;
			break;
		default:
			break;
		}
		return;
	}
}

void Sample::ClearSelected()
{
}

Sample::Sample()
{
}


Sample::~Sample()
{
}